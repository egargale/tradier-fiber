------------------OLD MAIN---------------------------------

package main

import (
	"fmt"
	"log"
	"tradier-fiber/internals/redis"
	"tradier-fiber/internals/rest"
	"tradier-fiber/internals/util"
	// "github.com/gofiber/adaptor/v2"
	// "github.com/davecgh/go-spew/spew"
)

func main() {

	// viper.AddConfigPath(".")
	// viper.SetConfigName("app")
	// viper.SetConfigType("env")
	// viper.AutomaticEnv()
	// err := viper.ReadInConfig()
	// if err != nil {
	// 	log.Fatalf("Error reading config file, %s", err)
	// }
	// err = viper.Unmarshal(&MyConfig)
	// if err != nil {
	// 	log.Fatalf("Unable to decode the config file, %v", err)
	// }
	// log.Printf("database uri is %s", MyConfig.TradierKey)
	if err := util.LoadConfig("./"); err != nil {
		panic(fmt.Errorf("invalid application configuration: %s", err))
	}
	// MyConfig, err := util.LoadConfig("./")
	// if err != nil {
	// 	log.Fatal("cannot load config:", err)
	// }
	log.Printf("Tradier Key: %s", util.MyConfig.TradierKey)
	log.Printf("Tradier Account: %s", util.MyConfig.TradierAccount)
	redis.TestRedis()

	// Get Postions
	// rest.MyTradier_Market()
	rest.MyTradierSandboxPosition()
	rest.MyTradierProductionPosition()

	// Setup endpoints
	// app := fiber.New()
	// // app.Get("/sse", adaptor.HTTPHandler(handler(dashboardHandler)))
	// app.Get("/mm", tradier_market)
	// app.Get("/market", func(c *fiber.Ctx) error {
	// 	return c.SendString("Hello, World!") // send text
	// })
	// app.Listen(":3300")
}

-----------------------------------------------------------------------------
func ExampleGetGzippedJsonWithFastHttp() {
	req := fasthttp.AcquireRequest()
	defer fasthttp.ReleaseRequest(req)
	req.SetRequestURI("https://httpbin.org/json")
	// fasthttp does not automatically request a gzipped response.
	// We must explicitly ask for it.
	req.Header.Set("Accept-Encoding", "gzip")

	resp := fasthttp.AcquireResponse()
	defer fasthttp.ReleaseResponse(resp)

	// Perform the request
	err := fasthttp.Do(req, resp)
	if err != nil {
		fmt.Printf("Client get failed: %s\n", err)
		return
	}
	if resp.StatusCode() != fasthttp.StatusOK {
		fmt.Printf("Expected status code %d but got %d\n", fasthttp.StatusOK, resp.StatusCode())
		return
	}

	// Verify the content type
	contentType := resp.Header.Peek("Content-Type")
	if bytes.Index(contentType, []byte("application/json")) != 0 {
		fmt.Printf("Expected content type application/json but got %s\n", contentType)
		return
	}

	// Do we need to decompress the response?
	contentEncoding := resp.Header.Peek("Content-Encoding")
	var body []byte
	if bytes.EqualFold(contentEncoding, []byte("gzip")) {
		fmt.Println("Unzipping...")
		body, _ = resp.BodyGunzip()
	} else {
		body = resp.Body()
	}

	fmt.Printf("Response body is: %s", body)
}
func GetAccountPositionWithFastHttp() {
	var url = tradierUrl + "accounts/" + tradierAccount + "/positions"
	fmt.Printf("Client will connect to: %s\n", url)
	req := fasthttp.AcquireRequest()
	defer fasthttp.ReleaseRequest(req)
	req.SetRequestURI(url)
	// fasthttp does not automatically request a gzipped response.
	// We must explicitly ask for it.
	req.Header.Set("Authorization", "Bearer "+tradierApi)
	req.Header.Set("Accept", "application/json")

	resp := fasthttp.AcquireResponse()
	defer fasthttp.ReleaseResponse(resp)

	// Perform the request
	err := fasthttp.Do(req, resp)
	if err != nil {
		fmt.Printf("Client get failed: %s\n", err)
		return
	}
	if resp.StatusCode() != fasthttp.StatusOK {
		fmt.Printf("Expected status code %d but got %d\n", fasthttp.StatusOK, resp.StatusCode())
		return
	}

	// Verify the content type
	contentType := resp.Header.Peek("Content-Type")
	if bytes.Index(contentType, []byte("application/json")) != 0 {
		fmt.Printf("Expected content type application/json but got %s\n", contentType)
		return
	}

	// Do we need to decompress the response?
	contentEncoding := resp.Header.Peek("Content-Encoding")
	var body []byte
	if bytes.EqualFold(contentEncoding, []byte("gzip")) {
		fmt.Println("Unzipping...")
		body, _ = resp.BodyGunzip()
	} else {
		body = resp.Body()
	}

	fmt.Printf("Response body is: %s", body)
}
func GetJsonWithFastHttp() {
	var url = tradierUrl + "markets/clock"
	fmt.Printf("Client will connect to: %s\n", url)
	req := fasthttp.AcquireRequest()
	defer fasthttp.ReleaseRequest(req)
	req.SetRequestURI(url)
	// fasthttp does not automatically request a gzipped response.
	// We must explicitly ask for it.
	req.Header.Set("Authorization", "Bearer "+tradierApi)
	req.Header.Set("Accept", "application/json")

	resp := fasthttp.AcquireResponse()
	defer fasthttp.ReleaseResponse(resp)

	// Perform the request
	err := fasthttp.Do(req, resp)
	if err != nil {
		fmt.Printf("Client get failed: %s\n", err)
		return
	}
	if resp.StatusCode() != fasthttp.StatusOK {
		fmt.Printf("Expected status code %d but got %d\n", fasthttp.StatusOK, resp.StatusCode())
		return
	}

	// Verify the content type
	contentType := resp.Header.Peek("Content-Type")
	if bytes.Index(contentType, []byte("application/json")) != 0 {
		fmt.Printf("Expected content type application/json but got %s\n", contentType)
		return
	}

	// Do we need to decompress the response?
	contentEncoding := resp.Header.Peek("Content-Encoding")
	var body []byte
	if bytes.EqualFold(contentEncoding, []byte("gzip")) {
		fmt.Println("Unzipping...")
		body, _ = resp.BodyGunzip()
	} else {
		body = resp.Body()
	}

	fmt.Printf("Response body is: %s", body)

	var result struct {
		Clock tradier.MarketStatus
	}

	err1 := json.Unmarshal(body, &result)
	if err1 != nil {
		fmt.Println("error:", err)
	}
	fmt.Printf("%+v", result.Clock)
	spew.Dump(result)
}
